#include <iostream>
#include <time.h>

#include "displayTest.h"

static void delay(float number_of_seconds);
static void printTestError(std::string msg);
static void testCursorPosition(basicLCD* disp, int expectedRow, int expectedCol);

void printTestError(std::string msg)
{
    std::cout << "==== ERROR! ====" << std::endl;
    std::cout << msg << std::endl;
}

void testCursorPosition(basicLCD* disp, int expectedRow, int expectedCol)
{
    cursorPosition curPos = {0};
    curPos = disp->lcdGetCursorPosition();
    if (curPos.row != expectedRow || curPos.column != expectedCol) {
        printTestError("Bad cursor position!");
    }
}

void delay(float number_of_seconds)
{
    // Convertimos a milis 
    float milli_seconds = 1000 * number_of_seconds;

    // Guardamos el tiempo 
    clock_t start_time = clock();

    // Congelamos el codigo hasta que se cumpla el tiempo 
    while (clock() < start_time + milli_seconds);
}

void tests(basicLCD** pDisplay, int size)
{
    for (int i = 0; i < size; i++)
    {
        basicLCD* currentDisp = pDisplay[i];
        cursorPosition curPos = { 0 };

        std::cout << "========== TESTING DISPLAY " << i << " ==========" << std::endl;

        std::string lcdStatus = currentDisp->lcdInitOk() ? "Ok" : "Error";
        std::cout << "Estado del display: " << lcdStatus << std::endl;
        if (!currentDisp->lcdInitOk()) {
            printTestError("Could not initialize display");
            break;
        }
        delay(1);

        std::cout << "Simple string: \'" 
            << "Testeando ando" 
            << "\'\n";
        (*currentDisp) << "Testeando" << " " << "ando";

        testCursorPosition(currentDisp, 0, 14);
        delay(2);

        std::cout << "Single characters: " 
            << "\'a\', \'b\', \' \', \'c\'" 
            << "\n";
        (*currentDisp) << 'a' << 'b' << ' ' << 'c';

        testCursorPosition(currentDisp, 1, 2);
        delay(2);

        std::cout << "Moving cursor to the left.\n";
        for (int i = 0; i < 6; i++) {
            currentDisp->lcdMoveCursorLeft();
        }
        testCursorPosition(currentDisp, 0, 12);
        delay(2);

        std::cout << "Clear to EOL.\n";
        currentDisp->lcdClearToEOL();
        delay(2);

        std::cout << "Move cursor down.\n";
        currentDisp->lcdMoveCursorDown();
        testCursorPosition(currentDisp, 1, 12);
        delay(1);

        std::cout << "Move cursor right.\n";
        currentDisp->lcdMoveCursorRight();
        testCursorPosition(currentDisp, 1, 13);
        delay(1);

        std::cout << "Replacing string on current cursor position with: "
            << "Hola!**" 
            << "\n";
        (*currentDisp) << "Hola!**";
        testCursorPosition(currentDisp, 0, 4);
        delay(1);

        std::cout << "Move cursor up. You should see an error message generated by the display.\n";
        if (currentDisp->lcdMoveCursorUp() == false) //Sólo este UP deberia generar un error
        {
            std::cout << "Display error message:" << std::endl;
            std::cout << "\tName: " << (currentDisp->lcdGetError()).getErrorName() << std::endl;
            std::cout << "\tDescription: " << (currentDisp->lcdGetError()).getErrorDescription() << std::endl;
            std::cout << "\tCode: " << (currentDisp->lcdGetError()).getErrorCode() << std::endl;
        }
        testCursorPosition(currentDisp, 0, 4);
        delay(1);

        std::cout << "Move cursor left.\n";
        currentDisp->lcdMoveCursorLeft();
        testCursorPosition(currentDisp, 0, 3);
        delay(1);

        std::cout << "Replacing string on current cursor position with: "
            << "curry desdeotra dimension  :)"
            << "\n";
        (*currentDisp) << "curry desde" << "otra dimension" << "  :)";
        testCursorPosition(currentDisp, 0, 0);
        delay(2);

        std::cout << "Inserting very long string. "
            << "If you see a letter or symbol other than a capital \'A\', that's an error."
            << "\n";
        // This are 64 X's and 32 A's
        (*currentDisp) << "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        delay(2);
        testCursorPosition(currentDisp, 0, 0);

        std::cout << "Clear display." << std::endl;
        currentDisp->lcdClear();
        testCursorPosition(currentDisp, 0, 0);
        delay(2);


        std::cout << "!=!=!=!=!= FINISHED TESTING DISPLAY " << i << " =!=!=!=!=!" << std::endl;
    }
}

